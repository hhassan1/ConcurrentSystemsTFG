sort Node = struct client | server | intruder | none;
sort Nonce = struct client_n | server_n | intruder_n | none_n;

act sendEncriptedNonce, receiveEncriptedNonce, nonce: Node # Node # Nonce # Node # Node;
    sendEncriptedNonceAndConfirmation, receiveEncriptedNonceAndConfirmation, nonce_and_confirmation_nonce : Node # Node # Nonce # Nonce # Node;
    confirmNonce, checkNonce, confirmation_nonce: Node # Node # Nonce # Node;
    client_accepts, server_accepts, client_rejects, server_rejects, intruder_wins;
    
proc 
  Client(server_node:Node, client_nonce:Nonce) = 
    sendEncriptedNonce(client,server_node,client_nonce,client,server_node)
    .sum confirmation_nonce:Nonce,server_nonce:Nonce.receiveEncriptedNonceAndConfirmation(server_node,client,confirmation_nonce,server_nonce,client)
    .(confirmation_nonce==client_nonce)
      ->
        (confirmNonce(client,server_node,server_nonce,server_node).client_accepts)
          <>
        client_rejects;
  Server(server_nonce:Nonce) =
    sum client_node, client_identity:Node, client_nonce:Nonce.receiveEncriptedNonce(client_node,server,client_nonce,client_identity,server)
    .sendEncriptedNonceAndConfirmation(server,client_node,client_nonce, server_nonce,client_identity)
    .sum confirmation_nonce:Nonce.checkNonce(client_node,server,confirmation_nonce,server)
    .(confirmation_nonce == server_nonce)
      ->
        server_accepts
          <>
        server_rejects;
  Intruder(client_nonce, server_nonce, intruder_nonce: Nonce, client_identity : Node, won : Bool) =
    (!won && client_nonce == client_n && server_nonce == server_n) -> intruder_wins.Intruder(client_nonce,server_nonce,intruder_nonce,client_identity,true) <>
    sum arg_1, arg_3 : Nonce, arg_2 : Node.(
      receiveEncriptedNonce(client,intruder,arg_1,arg_2,intruder).Intruder(arg_1,server_nonce,intruder_nonce,arg_2,won) +
      sendEncriptedNonce(intruder, server, client_nonce, client_identity, server).Intruder(client_nonce,server_nonce,intruder_nonce, client_identity,won) +
      receiveEncriptedNonceAndConfirmation(server, intruder, arg_1, arg_3, client_identity).sendEncriptedNonceAndConfirmation(intruder,client, arg_1, arg_3, client_identity).Intruder(client_nonce, server_nonce, intruder_nonce, client_identity,won) +
      checkNonce(client,intruder,arg_1,intruder).Intruder(client_nonce,arg_1,intruder_nonce,client_identity,won) +
      confirmNonce(intruder,server,server_nonce,server).Intruder(client_nonce,server_nonce,intruder_nonce,client_identity,won)
    );
    

init  allow({nonce,nonce_and_confirmation_nonce,confirmation_nonce,client_accepts,server_accepts,client_rejects,server_rejects,intruder_wins},
        comm({sendEncriptedNonce|receiveEncriptedNonce->nonce,
              sendEncriptedNonceAndConfirmation|receiveEncriptedNonceAndConfirmation->nonce_and_confirmation_nonce,
              confirmNonce|checkNonce->confirmation_nonce},
              Intruder(none_n,none_n,intruder_n,none,false) || Client(intruder,client_n) || Server(server_n)
            )
      );