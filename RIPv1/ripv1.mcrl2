sort Distance = struct D(cost:Pos,next:Int)?isDistance | Infinite?isInfinite;
map n : Pos;
eqn n = 4;
map m : Pos;
eqn m = 4;

map constUnk : Nat -> Distance;
var vv : Nat;
eqn constUnk(vv) = Infinite;

map mix : Nat # Nat # (Nat->Distance) # (Nat->Distance) # Pos -> (Nat->Distance);
var ipA, ipB : Nat;
    a, b : (Nat->Distance);
    m : Pos;
eqn mix(ipA,ipB,a,b,m) = mix_aux(ipA,ipB,a,b,0,m);

map less : Nat # Nat # Nat # (Nat -> Distance) # (Nat -> Distance) -> (Nat -> Distance);
var ipA, ipB, pos: Nat;
    a, b : (Nat->Distance);
eqn isDistance(a(pos)) && isDistance(b(pos)) -> less(ipA,ipB,pos,a,b) = if(cost(a(pos))>=cost(b(pos)) || next(b(pos))==ipA,a,a[pos->D(cost(b(pos))+1,ipB)]);
    isInfinite(a(pos)) && isDistance(b(pos)) -> less(ipA,ipB,pos,a,b) = a[pos->D(cost(b(pos))+1,ipB)];
    isInfinite(b(pos)) -> less(ipA,ipB,pos,a,b) = a;


map mix_aux : Nat # Nat # (Nat->Distance) # (Nat->Distance) # Nat # Pos -> (Nat->Distance);
var a, b : (Nat->Distance);
    ipA, ipB, curr : Nat;
    m : Pos;
eqn curr == m -> mix_aux(ipA,ipB,a,b,curr,m) = a;
    curr < m -> mix_aux(ipA,ipB,a,b,curr,m) = mix_aux(ipA,ipB,less(ipA,ipB,curr,a,b),b,curr+1,m);

map adjacent : Nat # Nat -> Bool;
var x,y : Nat;
eqn adjacent(0,1) = true;
    adjacent(1,2) = true;
    adjacent(1,3) = true;
    adjacent(2,3) = true;
    x > y -> adjacent(x,y) = adjacent(y,x);
    adjacent(x,y) = false;

map makeVector : Nat -> (Nat -> Distance);
var i : Nat;
eqn makeVector(i) = makeVectorAux(i,0,n,constUnk);


map makeVectorAux : Nat # Nat # Pos # (Nat -> Distance) -> (Nat -> Distance);
var i, curr : Nat;
    n : Pos;
    a : (Nat -> Distance);
eqn i >= n -> makeVectorAux(i,curr,n,a) = a;
    i < n && (!adjacent(i,curr)) -> makeVectorAux(i,curr,n,a) = makeVectorAux(i,curr+1,n,a);
    makeVectorAux(i,curr,n,a) = makeVectorAux(i,curr+1,n,a[curr->D(1,-1)]);


act send_request, receive_request, request : Nat # Nat;
    send_response, receive_response, response : Nat # Nat # (Nat -> Distance);
    connection_error, broken_link, failure : Nat;
    
proc
  Router(i : Nat, distances : Nat -> Distance) = 
    ((sum j:Nat.(adjacent(i,j))->(send_request(i,j).Router(i,distances) + broken_link(j).Router(i,distances[j->Infinite]))) +
     (sum j:Nat.receive_request(j,i).send_response(i,j,distances).Router(i,distances)) +
     (sum j:Nat,table:(Nat->Distance).receive_response(j,i,table).Router(i,mix(i,j,distances,table,m))));

init  allow({request,failure,response},
        comm({connection_error | broken_link -> failure,
              send_request | receive_request -> request,
              send_response | receive_response -> response},
          connection_error(0) ||
          Router(1,makeVector(1)) ||
          Router(2,makeVector(2)) ||
          Router(3,makeVector(3))
        )
      );
